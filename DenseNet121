{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**DenseNet121**"
      ],
      "metadata": {
        "id": "7JtHZ8FyGFFj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2pxk935wGS4I"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from keras.applications import resnet\n",
        "from keras.layers import Flatten , Dense , Activation\n",
        "from keras import optimizers , Sequential\n",
        "from keras.optimizers import Adam\n",
        "from keras import models , layers\n",
        "from keras.layers import Input\n",
        "from keras.models import Model\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import itertools\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d646792-5c97-40ab-b45e-fbedc14bfeb8",
        "id": "QEjc9HqVGS4J"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount(\"/content/gdrive\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TqTGe6cmGS4J"
      },
      "outputs": [],
      "source": [
        "train_path='/content/gdrive/MyDrive/Dataset (1)/train'\n",
        "val_path='/content/gdrive/MyDrive/Dataset (1)/val'\n",
        "test_data='/content/gdrive/MyDrive/Dataset (1)/test'"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "train_datagen = ImageDataGenerator(rescale=1./255,zoom_range=0.15,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.15)\n",
        "val_datagen = ImageDataGenerator(rescale=1./255)\n",
        "testdata_datagen=ImageDataGenerator(rescale=1./255)"
      ],
      "metadata": {
        "id": "0miRDzhCGS4J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_generator = train_datagen.flow_from_directory(train_path,target_size=(224, 224),batch_size=64,shuffle=True,class_mode='sparse')\n",
        "val_generator = val_datagen.flow_from_directory(val_path,target_size=(224,224),batch_size=64,shuffle=True,class_mode='sparse')\n",
        "test_generator = testdata_datagen.flow_from_directory(test_data,target_size=(224,224),batch_size=64,shuffle=False,class_mode='sparse')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e387ff0-6044-4592-d06a-9a864d4de48a",
        "id": "hTO7mU4CGS4J"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 994 images belonging to 4 classes.\n",
            "Found 343 images belonging to 4 classes.\n",
            "Found 184 images belonging to 4 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "805fa8b3-bdc1-4664-fda2-d9efccc25f10",
        "id": "VV1uw0cZGS4J"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/densenet/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "29084464/29084464 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "dense_model = tf.keras.applications.DenseNet121(pooling='avg',\n",
        "                    weights='imagenet',\n",
        "                    include_top=False,\n",
        "                    input_shape=(224,224,3))\n",
        "for layers in dense_model.layers:\n",
        "            layers.trainable=False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VOQ9Sg_CGS4J"
      },
      "outputs": [],
      "source": [
        "from keras.layers import Input,BatchNormalization , Dropout"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d7ab46ee-5b18-430e-e03b-ed1d90f50a18",
        "id": "t02EyLEBGS4K"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " densenet121 (Functional)    (None, 1024)              7037504   \n",
            "                                                                 \n",
            " batch_normalization (BatchN  (None, 1024)             4096      \n",
            " ormalization)                                                   \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 1024)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 256)               262400    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 128)               32896     \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 128)               16512     \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 4)                 516       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 7,353,924\n",
            "Trainable params: 314,372\n",
            "Non-trainable params: 7,039,552\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model = Sequential()\n",
        "model.add(dense_model)\n",
        "model.add(BatchNormalization())\n",
        "model.add(Flatten())\n",
        "model.add(Dense(256,activation='relu'))\n",
        "model.add(Dense(128,activation='relu'))\n",
        "model.add(Dense(128,activation='relu'))\n",
        "model.add(Dense(4,activation='softmax'))\n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8211bea1-f3f5-47b6-aabc-b915797cf7f9",
        "id": "EGsqc4ToGS4K"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super().__init__(name, **kwargs)\n"
          ]
        }
      ],
      "source": [
        "model.compile(optimizer=Adam(lr=0.0001),\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e1ae1b26-fc91-45b2-dc57-a8bd53615de3",
        "id": "f0DmofYDGS4K"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "16/16 [==============================] - 244s 14s/step - loss: 1.2286 - accuracy: 0.4668 - val_loss: 1.1852 - val_accuracy: 0.5335\n",
            "Epoch 2/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.9752 - accuracy: 0.6429 - val_loss: 1.0660 - val_accuracy: 0.5773\n",
            "Epoch 3/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.8044 - accuracy: 0.7143 - val_loss: 0.9453 - val_accuracy: 0.6093\n",
            "Epoch 4/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.6879 - accuracy: 0.7686 - val_loss: 0.8352 - val_accuracy: 0.6793\n",
            "Epoch 5/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.5883 - accuracy: 0.8139 - val_loss: 0.7392 - val_accuracy: 0.7230\n",
            "Epoch 6/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.5041 - accuracy: 0.8501 - val_loss: 0.6527 - val_accuracy: 0.8017\n",
            "Epoch 7/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.4351 - accuracy: 0.8732 - val_loss: 0.5779 - val_accuracy: 0.8192\n",
            "Epoch 8/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.3718 - accuracy: 0.8984 - val_loss: 0.5178 - val_accuracy: 0.8542\n",
            "Epoch 9/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.3450 - accuracy: 0.8954 - val_loss: 0.4681 - val_accuracy: 0.8630\n",
            "Epoch 10/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.3034 - accuracy: 0.9175 - val_loss: 0.4292 - val_accuracy: 0.8805\n",
            "Epoch 11/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.2955 - accuracy: 0.9125 - val_loss: 0.3906 - val_accuracy: 0.9009\n",
            "Epoch 12/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.2476 - accuracy: 0.9336 - val_loss: 0.3627 - val_accuracy: 0.9009\n",
            "Epoch 13/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.2372 - accuracy: 0.9316 - val_loss: 0.3386 - val_accuracy: 0.9067\n",
            "Epoch 14/100\n",
            "16/16 [==============================] - 19s 1s/step - loss: 0.2167 - accuracy: 0.9366 - val_loss: 0.3218 - val_accuracy: 0.9067\n",
            "Epoch 15/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.2055 - accuracy: 0.9396 - val_loss: 0.3023 - val_accuracy: 0.9067\n",
            "Epoch 16/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.1698 - accuracy: 0.9588 - val_loss: 0.2906 - val_accuracy: 0.9038\n",
            "Epoch 17/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.1669 - accuracy: 0.9507 - val_loss: 0.2739 - val_accuracy: 0.9096\n",
            "Epoch 18/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.1558 - accuracy: 0.9577 - val_loss: 0.2583 - val_accuracy: 0.9213\n",
            "Epoch 19/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.1462 - accuracy: 0.9537 - val_loss: 0.2490 - val_accuracy: 0.9155\n",
            "Epoch 20/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.1374 - accuracy: 0.9668 - val_loss: 0.2455 - val_accuracy: 0.9242\n",
            "Epoch 21/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.1215 - accuracy: 0.9648 - val_loss: 0.2271 - val_accuracy: 0.9242\n",
            "Epoch 22/100\n",
            "16/16 [==============================] - 19s 1s/step - loss: 0.1149 - accuracy: 0.9728 - val_loss: 0.2168 - val_accuracy: 0.9300\n",
            "Epoch 23/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.1091 - accuracy: 0.9718 - val_loss: 0.2090 - val_accuracy: 0.9388\n",
            "Epoch 24/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.1028 - accuracy: 0.9738 - val_loss: 0.1964 - val_accuracy: 0.9446\n",
            "Epoch 25/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.1138 - accuracy: 0.9698 - val_loss: 0.1913 - val_accuracy: 0.9446\n",
            "Epoch 26/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0816 - accuracy: 0.9779 - val_loss: 0.1917 - val_accuracy: 0.9446\n",
            "Epoch 27/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0879 - accuracy: 0.9769 - val_loss: 0.1812 - val_accuracy: 0.9417\n",
            "Epoch 28/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0833 - accuracy: 0.9809 - val_loss: 0.1816 - val_accuracy: 0.9417\n",
            "Epoch 29/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0843 - accuracy: 0.9829 - val_loss: 0.1756 - val_accuracy: 0.9446\n",
            "Epoch 30/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0733 - accuracy: 0.9779 - val_loss: 0.1666 - val_accuracy: 0.9504\n",
            "Epoch 31/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0633 - accuracy: 0.9859 - val_loss: 0.1658 - val_accuracy: 0.9504\n",
            "Epoch 32/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0583 - accuracy: 0.9909 - val_loss: 0.1504 - val_accuracy: 0.9563\n",
            "Epoch 33/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0573 - accuracy: 0.9859 - val_loss: 0.1546 - val_accuracy: 0.9475\n",
            "Epoch 34/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0591 - accuracy: 0.9869 - val_loss: 0.1579 - val_accuracy: 0.9504\n",
            "Epoch 35/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0527 - accuracy: 0.9879 - val_loss: 0.1525 - val_accuracy: 0.9534\n",
            "Epoch 36/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0513 - accuracy: 0.9869 - val_loss: 0.1427 - val_accuracy: 0.9650\n",
            "Epoch 37/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0394 - accuracy: 0.9920 - val_loss: 0.1462 - val_accuracy: 0.9621\n",
            "Epoch 38/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0381 - accuracy: 0.9940 - val_loss: 0.1431 - val_accuracy: 0.9621\n",
            "Epoch 39/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0436 - accuracy: 0.9899 - val_loss: 0.1388 - val_accuracy: 0.9679\n",
            "Epoch 40/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0431 - accuracy: 0.9940 - val_loss: 0.1452 - val_accuracy: 0.9621\n",
            "Epoch 41/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0382 - accuracy: 0.9899 - val_loss: 0.1339 - val_accuracy: 0.9708\n",
            "Epoch 42/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0293 - accuracy: 0.9980 - val_loss: 0.1421 - val_accuracy: 0.9621\n",
            "Epoch 43/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0309 - accuracy: 0.9960 - val_loss: 0.1402 - val_accuracy: 0.9679\n",
            "Epoch 44/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0275 - accuracy: 0.9940 - val_loss: 0.1400 - val_accuracy: 0.9708\n",
            "Epoch 45/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0329 - accuracy: 0.9930 - val_loss: 0.1435 - val_accuracy: 0.9592\n",
            "Epoch 46/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0276 - accuracy: 0.9960 - val_loss: 0.1548 - val_accuracy: 0.9563\n",
            "Epoch 47/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0313 - accuracy: 0.9930 - val_loss: 0.1466 - val_accuracy: 0.9592\n",
            "Epoch 48/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0267 - accuracy: 0.9960 - val_loss: 0.1342 - val_accuracy: 0.9679\n",
            "Epoch 49/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0324 - accuracy: 0.9940 - val_loss: 0.1670 - val_accuracy: 0.9592\n",
            "Epoch 50/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0213 - accuracy: 0.9980 - val_loss: 0.1448 - val_accuracy: 0.9650\n",
            "Epoch 51/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0239 - accuracy: 0.9930 - val_loss: 0.1487 - val_accuracy: 0.9592\n",
            "Epoch 52/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0234 - accuracy: 0.9950 - val_loss: 0.1358 - val_accuracy: 0.9650\n",
            "Epoch 53/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0220 - accuracy: 0.9940 - val_loss: 0.1536 - val_accuracy: 0.9650\n",
            "Epoch 54/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0287 - accuracy: 0.9920 - val_loss: 0.1711 - val_accuracy: 0.9592\n",
            "Epoch 55/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0256 - accuracy: 0.9960 - val_loss: 0.1605 - val_accuracy: 0.9563\n",
            "Epoch 56/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0198 - accuracy: 0.9970 - val_loss: 0.1463 - val_accuracy: 0.9592\n",
            "Epoch 57/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0185 - accuracy: 0.9980 - val_loss: 0.1433 - val_accuracy: 0.9621\n",
            "Epoch 58/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0205 - accuracy: 0.9960 - val_loss: 0.1362 - val_accuracy: 0.9621\n",
            "Epoch 59/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0198 - accuracy: 0.9940 - val_loss: 0.1507 - val_accuracy: 0.9621\n",
            "Epoch 60/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0153 - accuracy: 0.9980 - val_loss: 0.1435 - val_accuracy: 0.9650\n",
            "Epoch 61/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0126 - accuracy: 0.9990 - val_loss: 0.1276 - val_accuracy: 0.9708\n",
            "Epoch 62/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0154 - accuracy: 0.9980 - val_loss: 0.1543 - val_accuracy: 0.9621\n",
            "Epoch 63/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0143 - accuracy: 0.9970 - val_loss: 0.1536 - val_accuracy: 0.9592\n",
            "Epoch 64/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0152 - accuracy: 0.9990 - val_loss: 0.1388 - val_accuracy: 0.9679\n",
            "Epoch 65/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0157 - accuracy: 0.9970 - val_loss: 0.1428 - val_accuracy: 0.9592\n",
            "Epoch 66/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0192 - accuracy: 0.9970 - val_loss: 0.1517 - val_accuracy: 0.9563\n",
            "Epoch 67/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0164 - accuracy: 0.9960 - val_loss: 0.1520 - val_accuracy: 0.9650\n",
            "Epoch 68/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0110 - accuracy: 0.9980 - val_loss: 0.1426 - val_accuracy: 0.9621\n",
            "Epoch 69/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0149 - accuracy: 0.9980 - val_loss: 0.1419 - val_accuracy: 0.9592\n",
            "Epoch 70/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0130 - accuracy: 0.9980 - val_loss: 0.1570 - val_accuracy: 0.9592\n",
            "Epoch 71/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0095 - accuracy: 0.9990 - val_loss: 0.1482 - val_accuracy: 0.9592\n",
            "Epoch 72/100\n",
            "16/16 [==============================] - 19s 1s/step - loss: 0.0112 - accuracy: 1.0000 - val_loss: 0.1375 - val_accuracy: 0.9650\n",
            "Epoch 73/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0136 - accuracy: 0.9970 - val_loss: 0.1465 - val_accuracy: 0.9621\n",
            "Epoch 74/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0103 - accuracy: 0.9970 - val_loss: 0.1501 - val_accuracy: 0.9621\n",
            "Epoch 75/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0085 - accuracy: 1.0000 - val_loss: 0.1388 - val_accuracy: 0.9650\n",
            "Epoch 76/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0119 - accuracy: 0.9990 - val_loss: 0.1548 - val_accuracy: 0.9621\n",
            "Epoch 77/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0105 - accuracy: 0.9990 - val_loss: 0.1502 - val_accuracy: 0.9592\n",
            "Epoch 78/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0148 - accuracy: 0.9980 - val_loss: 0.1512 - val_accuracy: 0.9592\n",
            "Epoch 79/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0103 - accuracy: 0.9980 - val_loss: 0.1417 - val_accuracy: 0.9621\n",
            "Epoch 80/100\n",
            "16/16 [==============================] - 19s 1s/step - loss: 0.0088 - accuracy: 0.9990 - val_loss: 0.1529 - val_accuracy: 0.9592\n",
            "Epoch 81/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0193 - accuracy: 0.9970 - val_loss: 0.1634 - val_accuracy: 0.9592\n",
            "Epoch 82/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0085 - accuracy: 0.9990 - val_loss: 0.1470 - val_accuracy: 0.9650\n",
            "Epoch 83/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0078 - accuracy: 0.9990 - val_loss: 0.1490 - val_accuracy: 0.9650\n",
            "Epoch 84/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0079 - accuracy: 0.9990 - val_loss: 0.1421 - val_accuracy: 0.9650\n",
            "Epoch 85/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0105 - accuracy: 0.9980 - val_loss: 0.1600 - val_accuracy: 0.9650\n",
            "Epoch 86/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0087 - accuracy: 0.9980 - val_loss: 0.1494 - val_accuracy: 0.9621\n",
            "Epoch 87/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0063 - accuracy: 0.9990 - val_loss: 0.1543 - val_accuracy: 0.9592\n",
            "Epoch 88/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0063 - accuracy: 1.0000 - val_loss: 0.1655 - val_accuracy: 0.9621\n",
            "Epoch 89/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0072 - accuracy: 0.9990 - val_loss: 0.1703 - val_accuracy: 0.9650\n",
            "Epoch 90/100\n",
            "16/16 [==============================] - 22s 1s/step - loss: 0.0085 - accuracy: 0.9990 - val_loss: 0.1471 - val_accuracy: 0.9650\n",
            "Epoch 91/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0072 - accuracy: 0.9980 - val_loss: 0.1606 - val_accuracy: 0.9592\n",
            "Epoch 92/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0054 - accuracy: 1.0000 - val_loss: 0.1747 - val_accuracy: 0.9592\n",
            "Epoch 93/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0048 - accuracy: 0.9990 - val_loss: 0.1396 - val_accuracy: 0.9679\n",
            "Epoch 94/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0050 - accuracy: 1.0000 - val_loss: 0.1386 - val_accuracy: 0.9708\n",
            "Epoch 95/100\n",
            "16/16 [==============================] - 19s 1s/step - loss: 0.0077 - accuracy: 0.9990 - val_loss: 0.1467 - val_accuracy: 0.9650\n",
            "Epoch 96/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0090 - accuracy: 0.9980 - val_loss: 0.1416 - val_accuracy: 0.9650\n",
            "Epoch 97/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0092 - accuracy: 0.9980 - val_loss: 0.1542 - val_accuracy: 0.9650\n",
            "Epoch 98/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0104 - accuracy: 0.9960 - val_loss: 0.1490 - val_accuracy: 0.9708\n",
            "Epoch 99/100\n",
            "16/16 [==============================] - 17s 1s/step - loss: 0.0099 - accuracy: 0.9990 - val_loss: 0.1414 - val_accuracy: 0.9738\n",
            "Epoch 100/100\n",
            "16/16 [==============================] - 18s 1s/step - loss: 0.0086 - accuracy: 0.9980 - val_loss: 0.1559 - val_accuracy: 0.9621\n"
          ]
        }
      ],
      "source": [
        "history = model.fit(train_generator,\n",
        "                    validation_data=val_generator,\n",
        "                    epochs=100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da8ee3c7-7011-4f23-d51d-0e108c7653fe",
        "id": "mU7XUiLYGS4K"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3/3 [==============================] - 32s 16s/step - loss: 0.1995 - accuracy: 0.9457\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.19950617849826813, 0.945652186870575]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        " model.evaluate(test_generator)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred = model.predict(test_generator)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34b0fe01-5e3c-44ca-cb95-30d1a095ae55",
        "id": "3zHweeNKGS4K"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3/3 [==============================] - 3s 312ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = np.argmax(Y_pred, axis=1)"
      ],
      "metadata": {
        "id": "BqoWvTy_GS4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_true = test_generator.classes"
      ],
      "metadata": {
        "id": "5CR1gt4YGS4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "Ux-2qdOvGS4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_true, y_pred)"
      ],
      "metadata": {
        "id": "TB-VAmgWGS4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "cm_df = pd.DataFrame(cm,\n",
        "                     index = ['CP','ME','MP','NL'],\n",
        "                     columns = ['CP','ME','MP','NL'])"
      ],
      "metadata": {
        "id": "gjnl2Tk2GS4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 239
        },
        "outputId": "b8a02e40-5dca-4133-aef1-ed20b6f08b39",
        "id": "CDvDPfzGGS4L"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-88cfd1af2217>:5: MatplotlibDeprecationWarning: Auto-removal of overlapping axes is deprecated since 3.6 and will be removed two minor releases later; explicitly call ax.remove() as needed.\n",
            "  plt.subplot(1,3,1)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1300x250 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import keras\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "plt.subplots(figsize=(13,2.5))\n",
        "plt.subplot(1,3,1)\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('DenseNet121 Model Accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Number of Epochs')\n",
        "plt.legend(['Train_Acc', 'Val_Acc'], loc='lower right')\n",
        "\n",
        "plt.subplot(1,3,2)\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('DenseNet121 Model Loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Number of Epochs')\n",
        "plt.legend(['Train_Loss', 'Val_Loss'], loc='upper right')\n",
        "\n",
        "plt.subplot(1,3,3)\n",
        "#plt.figure(figsize=(3.5,2.5))\n",
        "colormap = sns.color_palette(\"Greens\")\n",
        "sns.heatmap(cm_df,cmap=colormap, annot=True)\n",
        "plt.title('DenseNet121 Confusion Matrix')\n",
        "plt.ylabel('True Labels')\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_true, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40b33b66-d542-47f9-9077-a89fc8249063",
        "id": "C9XEQ0eNGS4M"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      1.00      0.96        37\n",
            "           1       0.93      1.00      0.96        27\n",
            "           2       0.97      0.90      0.93        63\n",
            "           3       0.95      0.93      0.94        57\n",
            "\n",
            "    accuracy                           0.95       184\n",
            "   macro avg       0.94      0.96      0.95       184\n",
            "weighted avg       0.95      0.95      0.95       184\n",
            "\n"
          ]
        }
      ]
    }
  ]
}
